#Config basic
spring.application.name=biblioteca

# Banco de dados PostgreSQL
spring.datasource.url=jdbc:postgresql://localhost:5432/biblioteca
spring.datasource.username=postgres
spring.datasource.password=biblioteca_virtual
spring.datasource.driver-class-name=org.postgresql.Driver

# Config do Hibernate/JPA
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true

# Config
spring.jpa.properties.hibernate.jdbc.time_zone=America/Sao_Paulo
spring.jpa.properties.hibernate.transaction.jta.platform=org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform

# Admin
admin.initial.email=admin@biblioteca.com.br
admin.initial.password=AdministradorBiblioteca2025!
admin.initial.name=Administrador

# Servidor de e-mail (Gmail como exemplo)
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=seu_email@gmail.com
spring.mail.password=sua_senha_app
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Google(Drive para armazenamento de PDFs)
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
spring.config.import=optional:file:.env[.properties]

# Config FlyWay
spring.flyway.enabled=true
spring.flyway.baseline-on-migrate=false
spring.flyway.locations=classpath:db/migration

spring.docker.compose.enabled=false

# Debug
logging.level.root=WARN

logging.level.com.biblioteca.backend=DEBUG

logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} %-5p [%thread] %logger{36}.%M - %msg%n

logging.level.com.biblioteca.backend.exception.GlobalExceptionHandler=DEBUG

# KAFKA CONFIGURATION
spring.kafka.bootstrap-servers=${SPRING_KAFKA_BOOTSTRAP_SERVERS}

spring.kafka.consumer.group-id=biblioteca-group
spring.kafka.consumer.auto-offset-reset=earliest

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# Diz ao consumidor que ele pode confiar em classes do nosso pacote para desserializa\u00E7\u00E3o
spring.kafka.consumer.properties.spring.json.trusted.packages=*